from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum


class TaskStatus(str, Enum):
    OPEN = "Open"
    IN_PROGRESS = "In Progress"
    RESOLVED = "Resolved"
    CLOSED = "Closed"


class TaskSeverity(str, Enum):
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"
    CRITICAL = "Critical"


class TaskBase(BaseModel):
    title: str = Field(..., min_length=1, max_length=200)
    description: str = Field(..., min_length=1, description="HTML content for task description")
    severity: TaskSeverity
    status: TaskStatus = TaskStatus.OPEN
    assigned_to: Optional[str] = None
    project_id: Optional[str] = Field(None, description="ID of the project this task belongs to")
    tags: List[str] = []


class TaskCreate(TaskBase):
    pass


class TaskUpdate(BaseModel):
    title: Optional[str] = Field(None, min_length=1, max_length=200)
    description: Optional[str] = Field(None, min_length=1, description="HTML content for task description")
    severity: Optional[TaskSeverity] = None
    status: Optional[TaskStatus] = None
    assigned_to: Optional[str] = None
    tags: Optional[List[str]] = None


class TaskResponse(TaskBase):
    id: Optional[str] = Field(default=None, alias="_id")
    created_by: str
    created_at: datetime
    updated_at: datetime

    class Config:
        populate_by_name = True


class TaskInDB(TaskBase):
    id: Optional[str] = Field(default=None, alias="_id")
    created_by: str
    created_at: datetime
    updated_at: datetime

    class Config:
        populate_by_name = True


class DescriptionGenerateRequest(BaseModel):
    title: str = Field(..., min_length=1, max_length=200, description="Task title to generate description for")


class DescriptionGenerateResponse(BaseModel):
    description: str = Field(..., description="Generated HTML description content")
    generated_by_ai: bool = Field(..., description="Whether description was generated by AI or fallback")


class TagGenerateRequest(BaseModel):
    title: str = Field(..., min_length=1, max_length=200, description="Task title")
    description: str = Field(default="", description="Task description (optional)")


class TagGenerateResponse(BaseModel):
    tags: List[str] = Field(..., description="Generated tags")
    generated_by_ai: bool = Field(..., description="Whether tags were generated by AI or fallback")


class SearchRequest(BaseModel):
    query: str = Field(..., min_length=1, max_length=500, description="Search query")
    limit: int = Field(default=20, ge=1, le=100, description="Maximum number of results")
    search_type: str = Field(default="intelligent", description="Type of search: keyword, semantic, hybrid, intelligent")


class SearchResult(BaseModel):
    task: TaskResponse
    similarity_score: float = Field(..., description="Relevance score for the search result")
    final_score: float = Field(default=0.0, description="Final combined score")


class SearchResponse(BaseModel):
    results: List[SearchResult] = Field(..., description="Search results")
    enhanced_query: str = Field(..., description="AI-enhanced search query")
    suggestions: List[str] = Field(default=[], description="Search suggestions")
    total_results: int = Field(..., description="Total number of results found")
    search_type: str = Field(..., description="Type of search performed")
